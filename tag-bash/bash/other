# 3rd Party Programs(ie. non shell)  Configuration

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SSH
# Ensure ssh-agent is started then load the main key
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
  echo "Initializing new SSH agent..."
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
  echo succeeded
  chmod 600 "${SSH_ENV}"
  source "${SSH_ENV}" > /dev/null
  /usr/bin/ssh-add
}

if [ -f /usr/local/bin/keychain ]; then
  /usr/local/bin/keychain $HOME/.ssh/id_rsa
  source $HOME/.keychain/$HOST-sh
elif [ -f "${SSH_ENV}" ]; then  # Source: http://mah.everybody.org/docs/ssh
  source "${SSH_ENV}" > /dev/null
  ps -fp ${SSH_AGENT_PID} | grep 'ssh-agent$' > /dev/null || { start_agent; }
else
  start_agent;
fi

#~~~~~~~~~
# RVM
#~~~~~~~~
# The goal here is that when RVM is available, we use that, 
# and when it isn't we tell Bundler to install into a shared area 
# inside my home directory. 
# That way I never have to do gem installations with root privileges.
if which rvm > /dev/null; then
  # load RVM into a shell session.
  [[ -s "/usr/local/rvm/scripts/rvm" ]] && . "/usr/local/rvm/scripts/rvm"

  if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
    source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  else
     # make Bundler do passwordless installs to a sandbox rather than to the system
    export BUNDLE_PATH=~/.bundle
  fi
  export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
fi

#~~~~~~~~~
# Rbenv
#~~~~~~~~~
if which rbenv 2>&- ; then  # "2>&-" <==> "2>/dev/null"
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  source ~/.rbenv/completions/rbenv.bash
fi

#~~~~~~~~~
# Frum: https://github.com/tako8ki/frum
#~~~~~~~~~
if which frum > /dev/null; then
  eval "$(frum init)"
fi

#~~~~~~~~~~~~~
# Open argument in Dash: 
#   http://zanshin.net/2014/12/26/integrating-dash-into-vim-and-the-command-line/
#~~~~~~~~~~~~~
 function dash() {
   open "dash://$*"
 }

#~~~~~~~~~~~~~~~~~~~~
# fzf (Fuzzy Finder)
#   https://github.com/junegunn/fzf
#~~~~~~~~~~~~~~~~~~~~
if [ -f ~/.fzf.bash ]; then
  source ~/.fzf.bash
  export FZF_DEFAULT_OPTS="--height 40% \
                           --border sharp \
                           --layout=reverse \
                           --pointer ▶"
  export FZF_CTRL_T_OPTS="--height 60% \
                          --border sharp \
                          --layout reverse \
                          --prompt '∷ ' \
                          --pointer ▶"
fi

#~~~~~~~~~~~~~
# Tmux
#~~~~~~~~~~~~~
_not_inside_tmux() {
  [[ -z "$TMUX" ]]
}

ensure_tmux_is_running() {
  if _not_inside_tmux; then
    tat
  fi
}

# To prevent tmux sessions from hanging out when a cron tasks cleans up /tmp
export TMUX_TMPDIR=$HOME/tmp/tmux
[ ! -d $TMUX_TMPDIR ] && mkdir -p $TMUX_TMPDIR

# Automatically connect to a tmux session on startup, 
# even creating the session as needed.
[[ "$-" == *i* ]] && ensure_tmux_is_running

#~~~~~~~~~~~~~
# travis
#~~~~~~~~~~~~~
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

#~~~~~~~~~~~~~~~~
# direnv 
#~~~~~~~~~~~~~~~~
eval "$(direnv hook bash)"

#~~~~~~~~~~~~~~~~
# Homebrew
#~~~~~~~~~~~~~~~~
function brew-tap-list
{
	echo "Formulae for tap(s) $* are:"
	echo "";
	brew tap-info --json "$@" | jq -r '.[]|(.formula_names[],.cask_tokens[])' | sort -V;
}

#~~~~~~~~~~~~~~~~
# ngrok
#~~~~~~~~~~~~~~~~
if command -v ngrok &>/dev/null; then
  eval "$(ngrok completion)"
fi

#~~~~~~~~~~~~~~~~~
# Python
#~~~~~~~~~~~~~~~~~
if command -v python3 &>/dev/null; then
  # Add Pyton user bin dir to PATH
  #   to launch package command(s) installed with: pip install --user
  export PATH=$PATH:$(python3 -m site --user-base)/bin
  export PIP_REQUIRE_VIRTUALENV=1
fi

#~~~~~~~~~~~~~~~~~
# PyEnv
#~~~~~~~~~~~~~~~~~
if [ -d $HOME/.pyenv ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

#~~~~~~~~~~~~~~~~~
# Java
#~~~~~~~~~~~~~~~~~
if /usr/libexec/java_home -F -v 21 >/dev/null 2>&1; then
  export JAVA_HOME=$(/usr/libexec/java_home -v 21 2>/dev/null)
  export PATH=$PATH:$JAVA_HOME/bin
fi

#~~~~~~~~~~~~~~~~~
# Powerlevel10k (p10k)
#~~~~~~~~~~~~~~~~~
typeset -g POWERLEVEL9K_INSTANT_PROMPT=off

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

source $(brew --prefix)/share/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#~~~~~~~~~~~~~~~~~
# Starship (Shell Prompt)
#~~~~~~~~~~~~~~~~~
if command -v starship &>/dev/null; then
  eval $(starship init bash)
fi

#~~~~~~~~~~~~~~~~~
# zsh-autosuggestions
#   brew install zsh-autosuggestions
#~~~~~~~~~~~~~~~~~
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

#~~~~~~~~~~~~~~~~~
# Zoxide (better cd command)
#   brew install zoxide
#~~~~~~~~~~~~~~~~~
eval "$(zoxide init bash)"

#~~~~~~~~~~~~~~~~~
# 1Password CLI
# IMPORTANT: MUST be the last one in this file
#~~~~~~~~~~~~~~~~~
source ~/.config/op/plugins.sh

