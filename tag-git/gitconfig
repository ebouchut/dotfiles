[user]
	name = Eric Bouchut
	email = ebouchut@gmail.com
[color]
	ui = auto
[alias]
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	plog = log --graph --date=relative --format=\"%Cgreen%h %C(auto)%d %Creset%s  %C(yellow)(%cd) %C(magenta)<%aN>%Creset\"
	plog-files = plog --name-status
	unstage = reset HEAD --
	s = status
	ctags = !.git/hooks/ctags
#	pf = push --force-with-lease
	wow = log --all --graph --oneline --decorate --simplify-by-decoration
	score = shortlog -sn
	mine  = !git plog --graph --author=\"$(git config user.name)\" --author="ldm-eric.bouchut"
	today = !git plog --graph --since=midnight --author=\"$(git config user.name) <$(git config user.email)>\"
	week  = !git plog --graph --since \"one week ago\" --author=\"$(git config user.name) <$(git config user.email)>\"
	added = diff --name-status --diff-filter=A
	removed = diff --name-status --diff-filter=D
	deleted = diff --name-status --diff-filter=D
	modified = diff --name-status --diff-filter=M
	renamed = diff --name-status --diff-filter=R
	pull = pull --ff-only
	ignored = status --ignored
	lasttag = describe --tags --abbrev=0
	incoming = !git remote update && git plog ..@{u}
	outgoing = !git remote update && git plog @{u}..
	stsh = stash --keep-index  # unstaged
#	stash: unstaged + staged
	staash = stash --include-untracked  # unstaged + staged + untracked
	staaash = stash --all  # unstaged + staged + untracked + ignored
	tags = !git tag -ln99 | sort -V
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
	untrack = rm --cache --
	changes = diff --name-status --diff-filter=ACDMRTUXB
	log-deleted = !git log --diff-filter=D --summary | sed -n -e '/^commit/h' -e '\\:/:{' -e G -e 's/\\ncommit \\(.*\\)/ \\1/gp' -e '}'
	log-removed = log-deleted
	restore = !git checkout $(git rev-list -n 1 HEAD -- \"$1\")^ -- \"$1\"
	whereis = "!f() { echo Branches: >&2; git branch --all --contains \"$1\"; echo Tags: >&2; git tag --contains \"$1\"; }; f"
	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	hidden = !git ls-files -v | grep \"^[a-z]\" | cut -c3-
	unhide-all = update-index --really-refresh
	ref = name-rev --name-only
	plog-watch = !watch -n3 --color   git log --oneline --decorate --graph  --color --all
  releases = "!git fetch ; git branch -a --no-merged origin/master   | grep \"$(git config --local --get gitflow.prefix.release)\" # List git flow releases not finished yet"
	hotfixes = "!git fetch ; git branch -a --no-merged origin/master   | grep \"$(git config --local --get gitflow.prefix.hotfix)\" # List git flow hotfixes not finished yet"
	next-hotfix-version = "!git fetch -q; git lasttag origin/master | awk -F.  '{printf (\"%d.%d.%d\\n\", $2, $2, $3 + 1)}' #"
	sha1 = rev-parse
	help-web = help -w
	refs = for-each-ref --sort=-committerdate --format='%(color:red bold)%(refname:short)%(color:reset) %(color:yellow)(%(committerdate:relative))%(color:reset) %(color:magenta bold)<%(authorname)>%(color:reset) %(color:green)[%(objectname:short)]%(color:reset) %(contents:subject)'
	branch-gone = "!git for-each-ref  --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' refs/heads | sed '/^$/d' # List local branches whose upstream branch is gone"
	branch-delete-gone = "!git for-each-ref --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' refs/heads | sed -e '/^$/d' | xargs -n 1 -p  git branch -D"
	branch-recent = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/master}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/master}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
	upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
	uncommit = reset --soft HEAD^
	branch-name = rev-parse --abbrev-ref HEAD
#	tags-notpushed = "!git show-ref --tags | cut -d ' ' -f 2 | grep -v -F \"$(git ls-remote --tags origin | grep -v '\\^{}' | cut -f 2)\""
	 tags-notpushed = "!bash -c 'comm -23 <(git show-ref --tags | cut -d \" \" -f 2) <(git ls-remote --tags origin | grep -v \"\\^{}\" | cut -f 2)'"
	previous-tag = "!git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1)"
	tags-remote = !git ls-remote --tags --refs
	debug  = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"
# Quote / unquote a sh command, converting it to / from a git alias string
	quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
	unquote-string = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"
	repo-dir = rev-parse --show-toplevel
	commit-count = "!git rev-list --count ${1:-HEAD}"
	untracked = ls-files --others --exclude-standard
	most-changed = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -20"
	files-in-commit = show --pretty=\"\" --name-only
	commiters = shortlog --summary --numbered --email
	ls-files-remote-branch = "!f() { git ls-tree --name-only -r ${1-$(git rev-parse --abbrev-ref HEAD)}; }; f"
	gprp = !git pull --rebase && git push
	diffp = difftool -t p4merge -y
[apply]
	whitespace = nowarn
[core]
	autocrlf = input
	safecrlf = true
	excludesfile = ~/.gitignore_global
	pager = less -FRSX
[credential]
	helper = osxkeychain
[push]
	default = simple
[commit]
	template = ~/.git_message
[init]
	templatedir = ~/.git_template
	defaultBranch = master
[gitsh]
	noGreeting = true
[pager]
	log = diff-highlight | less -FRSX
	show = diff-highlight | less -FRSX
	diff = diff-highlight | less -FRSX
[diff]
	tool = bc3
	submodule = log
[difftool]
	prompt = false
[difftool  "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-diff' "$LOCAL" "$REMOTE"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[merge]
	tool = bc3
[mergetool]
	bc3 = trustExitCode
	prompt = false
[mergetool "bc3"]
	trustExitCode = true
	keepBackup = false
[mergetool  "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-merge' "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
	keepBackup = false
[mergetool "p4merge"]
	keepBackup = false
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[mergetool "splice"]
	cmd = vim -f \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\" -c SpliceInit
	trustExitCode = true
[interactive]
	diffFilter = diff-highlight
[hub]
	protocol = ssh
[color "branch"]
	upstream = cyan
[rebase]
	missingCommitsCheck = error
[include]
	path = ~/dev/Perso/dotfiles/tag-git/gitconfig-colors_dark
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[includeIf "gitdir:~/Work/"]
    path = ~/.gitconfig-work
[pull]
	rebase = false
