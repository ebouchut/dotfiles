
* My Emacs Configuration

** Install additional starter-kits   
*** Install missing packages

starter-kit.lisp requires the following packages to be present on the
filesystem, we therefore need to install them beforehand. 

#+BEGIN_SRC emacs-lisp
  (dolist (package '(paredit clojure-mode dired-details+))
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

*** starter-kit.lisp

#+BEGIN_SRC emacs-lisp
  (starter-kit-load "lisp")
#+END_SRC

*** starter-kit.js
[[http://eschulte.github.io/emacs24-starter-kit/starter-kit-js.html][Description]]

#+BEGIN_SRC emacs-lisp
  (starter-kit-load "js")
#+END_SRC

*** starter-kit.misc-recommended
[[http://eschulte.github.io/emacs24-starter-kit/starter-kit-misc-recommended.html][Description
]]
#+BEGIN_SRC emacs-lisp
  (starter-kit-load "misc-recommended")
#+END_SRC

*** starter-kit.python
[[http://eschulte.github.io/emacs24-starter-kit/starter-kit-python.html][Description]]
#+BEGIN_SRC emacs-lisp
  (starter-kit-load "python")
#+END_SRC

*** Install starter-kit.org

#+begin_src emacs-lisp
 (starter-kit-load "org")
#+end_src

*** Install starter-kit.ruby

#+begin_src emacs-lisp
 (starter-kit-load "ruby")
#+end_src

** stops me killing emacs by accident!

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

** Display the column number

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (line-number-mode 1)
#+END_SRC

** Set a window title

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '(buffer-file-name "Emacs: %b (%f)" "Emacs: %b"))
#+END_SRC   

** Save point position between sessions

#+BEGIN_SRC emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC

** Keyboard Mapping
***  Goto-line ==> M-g

#+BEGIN_SRC emacs-lisp
  (global-set-key [(meta g)] 'goto-line)
#+END_SRC

*** Join 2 lines ==> M-j

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-j")
              (lambda ()
                    (interactive)
                    (join-line -1)))
#+END_SRC

*** Open Recent Files ==> C-x C-r

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  
  (defun recentf-open-files-compl ()
        (interactive)
        (let* ((all-files recentf-list)
          (tocpl (mapcar (function 
             (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
          (prompt (append '("File name: ") tocpl))
          (fname (completing-read (car prompt) (cdr prompt) nil nil)))
          (find-file (cdr (assoc-ignore-representation fname tocpl))))) 
  
  (global-set-key "\C-x\C-r" 'recentf-open-files-compl)  
#+END_SRC
  
*** Open a line below ==> C-Return

#+BEGIN_SRC emacs-lisp
  ;; Cf. http://whattheemacsd.com/editing-defuns.el-01.html
    (defun open-line-below ()
      (interactive)
      (end-of-line)
      (newline)
      (indent-for-tab-command))
  
  (global-set-key (kbd "<C-return>") 'open-line-below)
#+END_SRC

***  Open a line above ==> C-Shift-Return

#+BEGIN_SRC emacs-lisp
    (defun open-line-above ()
      (interactive)
      (beginning-of-line)
      (newline)
      (forward-line -1)
      (indent-for-tab-command))
  
  (global-set-key (kbd "<C-S-return>") 'open-line-above)
#+END_SRC

*** Command == META key (on MacOs)

#+BEGIN_SRC emacs-lisp  
  (when (eq system-type 'darwin) 
    (setq mac-command-modifier 'meta
        mac-option-modifier nil
        mac-allow-anti-aliasing t      
        mac-command-key-is-meta t))
#+END_SRC

** Colour Theme: emacs-solarized
Use M-x load-theme <colour theme> to use a colour theme.

#+BEGIN_SRC emacs-lisp
  (dolist (package '(solarized-theme))
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

** WebJump => C-x g

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'webjump)
    
  ;;Add Webreference EN/FR and Urban Dictionary to webjump
  (eval-after-load "webjump"
  '(add-to-list 'webjump-sites
                    '("WordReference EN" .
                      [simple-query
                       "www.wordreference.com"
                       "http://www.wordreference.com/enfr/"
                       ""])
                    )
      )
#+END_SRC

** Visual Bell
"I set '(visible-bell t) in my customize which turns off an audible
bell. Unfortunately, on OSX that means I get to see a black 200x200 
square flash in the middle of the window every time I hit C-g. 
It is ugly, distracting, bad UX, and the maintainer of the OSX side
 of emacs doesn’t give a damn (about much of anything it seems).

Luckily, it is really easy to fix. This code makes the modeline flash
black instead."
[[http://blog.zenspider.com/blog/2013/06/my-emacs-setup-sanity.html][Thanks Zenspider for sharing this tip]]
#+BEGIN_SRC emacs-lisp
;; found at http://www.elliotglaysher.org/emacs/

;; -----------------------------------------------------------------------
;; Prevent the bell from ringing all the time.
;; -----------------------------------------------------------------------
;; nice little alternative visual bell; Miles Bader <miles /at/ gnu.org>

;; TODO(erg): Figure out why that note doesn't appear in the mode-line-bar...
(defcustom mode-line-bell-string "ding" ; "♪"
  "Message displayed in mode-line by `mode-line-bell' function."
  :group 'user)
(defcustom mode-line-bell-delay 0.1
  "Number of seconds `mode-line-bell' displays its message."
  :group 'user)

;; internal variables
(defvar mode-line-bell-cached-string nil)
(defvar mode-line-bell-propertized-string nil)

;;;###autoload
(defun mode-line-bell ()
  "Briefly display a highlighted message in the mode-line.

The string displayed is the value of `mode-line-bell-string',
with a red background; the background highlighting extends to the
right margin.  The string is displayed for `mode-line-bell-delay'
seconds.

This function is intended to be used as a value of `ring-bell-function'."

  (unless (equal mode-line-bell-string mode-line-bell-cached-string)
    (setq mode-line-bell-propertized-string
          (propertize
           (concat
            (propertize
             "x"
             'display
             `(space :align-to (- right ,(string-width mode-line-bell-string))))
            mode-line-bell-string)
           'face '(:background "black")))
    (setq mode-line-bell-cached-string mode-line-bell-string))
  (message mode-line-bell-propertized-string)
  (sit-for mode-line-bell-delay)
  (message ""))

;;;###autoload
(setq ring-bell-function 'mode-line-bell)
#+END_SRC
** Dired
Use ')' to show hidden ls details and '(' to hide them again.
[[ http://whattheemacsd.com/setup-dired.el-01.html][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Make dired less verbose.
  ;;   Use ')' to show hidden ls details and '(' to hide them again.
  ;;   http://whattheemacsd.com/setup-dired.el-01.html
  (add-to-list 'load-path "~/.emacs.d/elisp/external/dired-details")
  (add-to-list 'load-path "~/.emacs.d/elisp/external/dired-details-plus")
  (require 'dired-details+)
  (setq-default dired-details-hidden-string "--- ")
  
  ;; Silently auto-refresh dired buffers
  ;;   http://whattheemacsd.com/sane-defaults.el-01.html
  
  ;; Auto refresh buffers:
  (global-auto-revert-mode 1)
  
  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+END_SRC

** Ruby
*** TODO Ruby mode
*** TODO Rhtml
*** TODO Rspec
*** TODO Haml mode
*** TODO RVM
*** TODO Sass-Mode
*** TODO HTML,CSS, PHP
*** TODO Emacs-rails
** TODO mode-compile
** TODO Emacs-rails
** TODO L10N 
*** TODO French Dictionary
*** TODO French calendar

** Org-Mode
*** Agenda files 
Tells org-mode where to search for TODO and scheduled items.

#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
#+END_SRC

*** Languages used in code blocks

#+begin_src emacs-lisp       
 (org-babel-do-load-languages 
    'org-babel-load-languages 
    '((ruby . t))
 )
#+end_src

*** Org-Mobile configuration
Configure emacs to work hand in hand with org-mobile using a Dropbox
storage.

**** Location of your Org files on _this_ system

#+BEGIN_SRC emacs-lisp
 (setq org-directory "~/org")
#+END_SRC

**** File where new notes will be stored

#+BEGIN_SRC emacs-lisp
 (setq org-mobile-inbox-for-pull "~/org/flagged.org")
#+END_SRC
     
**** Location of  org files in DropBox
This is the path to the MobileOrg folder in your Dropbox:
 <your Dropbox root directory>/Apps/MobileOrg

#+BEGIN_SRC emacs-lisp
 (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+END_SRC



