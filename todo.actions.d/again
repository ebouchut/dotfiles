#!/usr/bin/env bash

#Copyright (C) 2013 Niklas Thorne.
#
#This file is part of again.
#
#again is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#again is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with again.  If not, see <http://www.gnu.org/licenses/>.

readonly SED_DATE_RE="[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}"

DATE_VERSION=

function usage()
{
  echo " again add-on:"
  echo "   again N "
  echo "     mark N as complete and recreate with any due date set as today."
  echo "   again N DAYS"
  echo "     mark N as complete and recreate with any due date and deferral date"
  echo "     set as DAYS days from today."
  echo "   again N +DAYS"
  echo "     mark N as complete and recreate with any due date and deferral date"
  echo "     set as DAYS days from their original values."
  echo ""
  exit
}

function error()
{
  echo "error: $@" >&2
  exit 1
}

function parse_options()
{
  local action=$1
  shift

  [ "$action" = "usage" ] && usage

  # Retrieve the item number from the arguments
  ITEM=$1
  if [[ ! "$ITEM" =~ ^[0-9]+$ ]]
  then
    error "$ITEM: invalid item number"
  exit
  fi

  shift
  DAYS=$1
}

# Retrieve line number $ITEM from the file $TODO_FILE
function get_line()
{
  [ -f "$TODO_FILE" ] || error "$TODO_FILE: no such file"
  # Get the line from the todo file
  LINE=$(sed "$ITEM!d" "$TODO_FILE")
  [ -z "$LINE" ] && error "$ITEM: no such line"
}

# Adjust the creation date of the item in $LINE to be todays date,
# if any such date.
function adjust_creation_date()
{
  # Adjust the task creation date, if any; otherwise leave it blank..
  #if [[ "$LINE" =~ "^(\([A-Z]\) )*[0-9]{4}-[0-9]{2}-[0-9]{2} .*" ]]
  if [[ "$LINE" =~ ^(\([A-Z]\) )*[0-9]{4}-[0-9]{2}-[0-9]{2}.* ]]
  then
    LINE=$(echo "$LINE" | sed "s/^\(([A-Z]) \)*\($SED_DATE_RE \)*\(.*\)/\1`date +%Y-%m-%d` \3/")
  fi
}

# Adjust any due date according of the task, according to $DAYS
function adjust_due_date()
{
  if [[ "$LINE" =~ .*due:[0-9]{4}-[0-9]{2}-[0-9]{2}.* ]]
  then
    if [[ -z $DAYS ]]
    then
      # DAYS not detailed; adjust to today.
      LINE=$(echo "$LINE" | sed "s/\(.*due:\)\($SED_DATE_RE\)\(.*\)/\1`date +%Y-%m-%d`\3/")
    else
      if [[ "$DAYS" =~ ^\+[0-9]+ ]]
      then
        # Adjust to DAYS from original values.
        ORIGINAL=$(echo "$LINE" | sed "s/.*due:\($SED_DATE_RE\).*/\1/")
        if [[ $DATE_VERSION == "GNU" ]]
        then
          ADJUST=`date -d "$ORIGINAL $DAYS days" +%Y-%m-%d`
        elif [[ $DATE_VERSION == "BSD" ]]
        then
          ADJUST=`date -j -v"$DAYS"d -f %Y-%m-%d $ORIGINAL +%Y-%m-%d`
        else
          error "Unknown date implementation. Bailing out."
        fi
      else
        # Adjust to DAYS from today.
        if [[ $DATE_VERSION == "GNU" ]]
        then
          ADJUST=`date -d "$DAYS days" +%Y-%m-%d`
        elif [[ $DATE_VERSION == "BSD" ]]
        then
          ADJUST=`date -j -v+"$DAYS"d +%Y-%m-%d`
        else
          error "Unknown date implementation. Bailing out."
        fi
      fi
      LINE=$(echo "$LINE" | sed "s/\(.*due:\)\($SED_DATE_RE\)\(.*\)/\1$ADJUST\3/")
    fi

  fi
}

# Adjust the deferal date of the task in $LINE, according to $DAYS
function adjust_deferral_date()
{
  if [[ "$LINE" =~ .*t:[0-9]{4}-[0-9]{2}-[0-9]{2}.* ]]
  then
    if [[ -z $DAYS ]]
    then
      # Target days not detailed; adjust to today.
      LINE=$(echo "$LINE" | sed "s/\(.*t:\)\($SED_DATE_RE\)\(.*\)/\1`date +%Y-%m-%d`\3/")
    else
      if [[ "$DAYS" =~ ^\+[0-9]+ ]]
      then
        # Adjust to DAYS from original values.
        ORIGINAL=$(echo "$LINE" | sed "s/.*t:\($SED_DATE_RE\).*/\1/")
        if [[ $DATE_VERSION == "GNU" ]]
        then
          ADJUST=`date -d "$ORIGINAL $DAYS days" +%Y-%m-%d`
        elif [[ $DATE_VERSION == "BSD" ]]
        then
          ADJUST=`date -j -f %Y-%m-%d -v"$DAYS"d $ORIGINAL +%Y-%m-%d`
        else
          error "Unknown date implementation. Bailing out."
        fi
      else
        # Adjust to DAYS from today.
        if [[ $DATE_VERSION == "GNU" ]]
        then
          ADJUST=`date -d "$DAYS days" +%Y-%m-%d`
        elif [[ $DATE_VERSION == "BSD" ]]
        then
          ADJUST=`date -j -v+"$DAYS"d +%Y-%m-%d`
        else
          error "Unknown date implementation. Bailing out."
        fi
      fi
      LINE=$(echo "$LINE" | sed "s/\(.*t:\)\($SED_DATE_RE\)\(.*\)/\1$ADJUST\3/")
    fi

  fi
}

function determine_date_version()
{
  date -v 1d 1>/dev/null 2>/dev/null
  if [[ 0 -eq $? ]]
  then
    DATE_VERSION="BSD"
  elif [[ $(date --version) =~ GNU ]]
  then
    DATE_VERSION="GNU"
  else
    error "Unknown date implementation. Bailing out."
  fi
}

parse_options "$@"
determine_date_version
get_line
adjust_creation_date
adjust_due_date
adjust_deferral_date

if [[ "$LINE" != "" ]]
then
  "$TODO_FULL_SH" command do "$ITEM"
  "$TODO_FULL_SH" command add "$LINE"
fi

